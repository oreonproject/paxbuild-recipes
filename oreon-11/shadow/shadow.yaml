name: shadow
version: "4.16.0"
description: "Shadow password suite"
author: "Various"
license: "Various"
homepage: ""
repository: ""
source_url: "https://github.com/shadow-maint/shadow/releases/download/4.16.0/shadow-4.16.0.tar.xz"
keywords:
  - shadow
categories:
  - packages

dependencies:
  build_dependencies:
    - name: "gcc"
      version_constraint: ">=4.0"
      optional: false
    - name: "make"
      version_constraint: ">=3.0"
      optional: false
  runtime_dependencies: []
  optional_dependencies: []
  conflicts: []

build:
  build_system: Make
  build_commands:
    - "sed -i '/libbsd-overlay.*required by.*virtual:world/{N;N;N;N;N;s/as_fn_error.*libbsd-overlay.*required by.*virtual:world.*/: # libbsd-overlay disabled/g;}' configure && sed -i '/checking for libbsd-overlay/,/^fi$/{/pkg_failed=yes/s/pkg_failed=yes/LIBBSD_CFLAGS=\"\"; LIBBSD_LIBS=\"\"; pkg_failed=no/;}' configure && sed -i '/readpassphrase.h is missing/{s/as_fn_error.*readpassphrase.h is missing/: # readpassphrase.h check skipped/g;}' configure && sed -i '/readpassphrase.*is missing.*either from libc or libbsd/{s/as_fn_error.*readpassphrase.*is missing.*either from libc or libbsd/: # readpassphrase check disabled - shadow will use its own implementation/g;}' configure && ./configure --prefix=/usr --without-selinux --without-libpam ac_cv_search_readpassphrase='no'"
    - "printf '%s\\n' '#include <stddef.h>' '#include <stdio.h>' '#include <stdlib.h>' '#include <string.h>' '#include <termios.h>' '#include <unistd.h>' '#include <sys/types.h>' '' '#ifndef RPP_ECHO_ON' '#define RPP_ECHO_ON     0x00' '#define RPP_ECHO_OFF    0x01' '#define RPP_REQUIRE_TTY 0x02' '#define RPP_FORCELOWER  0x04' '#define RPP_FORCEUPPER  0x08' '#define RPP_SEVENBIT    0x10' '#define RPP_STDIN       0x20' '#endif' '' 'void freezero(void *ptr, size_t len) {' '    if (ptr) {' '        explicit_bzero(ptr, len);' '        free(ptr);' '    }' '}' '' 'char *readpassphrase(const char *prompt, char *buf, size_t bufsiz, int flags) {' '    struct termios term, oterm;' '    int input = fileno(stdin);' '    size_t i = 0;' '    int ch;' '    if (prompt) {' '        fputs(prompt, stderr);' '        fflush(stderr);' '    }' '    if (tcgetattr(input, &oterm) == 0) {' '        term = oterm;' '        if (!(flags & RPP_ECHO_ON)) {' '            term.c_lflag &= ~(ECHO | ECHONL);' '        }' '        if (flags & RPP_REQUIRE_TTY) {' '            term.c_lflag |= ISIG;' '        }' '        tcsetattr(input, TCSAFLUSH, &term);' '    }' '    while (i < bufsiz - 1) {' '        if (read(input, &ch, 1) != 1) break;' '        if (ch == 10 || ch == 13) break;' '        if (ch == 3) { i = 0; break; }' '        if (ch == 127 || ch == 8) {' '            if (i > 0) {' '                i--;' '                if (!(flags & RPP_ECHO_ON)) {' '                    fputs(\"\\b \\b\", stderr);' '                    fflush(stderr);' '                }' '            }' '            continue;' '        }' '        buf[i++] = ch;' '        if (!(flags & RPP_ECHO_ON)) {' '            fputc(42, stderr);' '            fflush(stderr);' '        }' '    }' '    buf[i] = 0;' '    if (tcgetattr(input, &oterm) == 0) {' '        tcsetattr(input, TCSAFLUSH, &oterm);' '    }' '    fputc(10, stderr);' '    return (i > 0) ? buf : NULL;' '}' > lib/libbsd_stubs.c && find lib -name '*.c' -exec grep -l 'freezero' {} \\; | while read f; do awk '/^#include/{in_includes=1; print; next} in_includes && !/^#/{print \"#include <stddef.h>\"; print \"void freezero(void *, size_t);\"; in_includes=0} {print}' \"$f\" > \"$f.tmp\" && mv \"$f.tmp\" \"$f\"; done && make -C lib libshadow.la LIBS='' || true"
    - "cd lib && libtool --mode=compile gcc -fPIC -DPIC -I. -I.. -g -O2 -c libbsd_stubs.c -o libbsd_stubs.lo 2>&1 && ar r .libs/libshadow.a .libs/libbsd_stubs.o 2>&1 && ranlib .libs/libshadow.a 2>&1 && cd .. && make"
  build_dependencies:
    - "gcc"
    - "make"
    - "pkgconf"
  build_flags: []
  environment:
    CFLAGS: "-O2"
  working_directory: null
  target_architectures:
    - X86_64v1
    - X86_64v3
    - Aarch64
  cross_compiler_prefix: null
  target_sysroot: null

install:
  install_method: RunCommands
  install_commands:
    - "make install"
  install_directories:
    - "/usr/bin"
  install_files: []
  post_install_commands: []

files:
  include_patterns:
    - "*.c"
    - "*.h"
    - "configure"
    - "Makefile.in"
  exclude_patterns:
    - "**/*.o"
    - "**/*.a"
    - "tests/**/*"
    - ".git/**/*"
  binary_files: []
  config_files: []
  documentation_files: []
  license_files: []

scripts:
  pre_install: |
    echo "Installing shadow..."
  post_install: |
    echo "shadow installed successfully"
  pre_uninstall: |
    echo "Removing shadow..."
  post_uninstall: |
    echo "shadow removed successfully"
  pre_upgrade: null
  post_upgrade: null

metadata:
  maintainer: "Oreon Project Team <packaging@oreonproject.org>"
  section: "packages"
  priority: "optional"
  provides:
    - "shadow"
  conflicts: []
